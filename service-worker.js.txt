// service-worker.js
const CACHE = 'peptide-logger-v2';  // bump this when you update assets
const ASSETS = [
  './',
  './index.html',
  './manifest.webmanifest',
  './icons/icon-192.png',
  './icons/icon-512.png'
];

// Install: pre-cache shell and activate immediately
self.addEventListener('install', (e) => {
  e.waitUntil(
    caches.open(CACHE).then((c) => c.addAll(ASSETS))
      .then(() => self.skipWaiting())
  );
});

// Activate: clean old caches and take control
self.addEventListener('activate', (e) => {
  e.waitUntil(
    caches.keys().then((keys) =>
      Promise.all(keys
        .filter((k) => k !== CACHE)
        .map((k) => caches.delete(k))
      )
    ).then(() => self.clients.claim())
  );
});

// Fetch: cache-first for same-origin assets; offline fallback for navigation
self.addEventListener('fetch', (e) => {
  const req = e.request;
  const url = new URL(req.url);

  // Let cross-origin (Apps Script API, etc.) go straight to network
  if (url.origin !== location.origin) return;

  // For navigations, try network then fallback to cached shell
  if (req.mode === 'navigate') {
    e.respondWith(
      fetch(req).catch(() => caches.match('./index.html'))
    );
    return;
  }

  // For other same-origin GETs, serve cache-first
  if (req.method === 'GET') {
    e.respondWith(
      caches.match(req).then((cached) => cached || fetch(req))
    );
  }
});
